-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Create 'user' table (must come first due to FK dependencies)
CREATE TABLE "user" (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(100) NOT NULL,
    phone VARCHAR(20),
    type VARCHAR(20) NOT NULL CHECK (type IN ('owner', 'employee')),
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Create 'branches' table
CREATE TABLE branches (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    store_id UUID NOT NULL REFERENCES store(id),
    name VARCHAR(100) NOT NULL,
    address VARCHAR(255) NOT NULL,
    customer_support TEXT[],
    lat VARCHAR(50),  -- Latitude as string (or use DECIMAL for numeric)
    lang VARCHAR(50), -- Longitude as string (or use DECIMAL for numeric)
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
);

-- Create 'store' table
CREATE TABLE store (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    type VARCHAR(20) NOT NULL CHECK (type IN ('men', 'women', 'children', 'shoes')),
    name VARCHAR(100) NOT NULL,
    logo VARCHAR(255),
    banner VARCHAR(255),
    theme_color VARCHAR(50),
    delivery BOOLEAN DEFAULT FALSE,
    owner_id UUID NOT NULL REFERENCES "user"(id),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Junction table: store_branches (many-to-many)
CREATE TABLE store_branches (  -- Note: Matches your spelling 'brances' in the spec
    store_id UUID REFERENCES store(id),
    branch_id UUID REFERENCES branches(id),
    PRIMARY KEY (store_id, branch_id)
);

-- Create 'product' table
CREATE TABLE product (
    product_code VARCHAR(50) PRIMARY KEY,
    product_name VARCHAR(100) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    price_before_sale DECIMAL(10, 2),
    images TEXT[],
    category VARCHAR(50),
    tags TEXT[],
    details TEXT,
    status VARCHAR(20),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_by UUID REFERENCES "user"(id),
    updated_by UUID REFERENCES "user"(id)
);

-- Junction table: product_branches (many-to-many)
CREATE TABLE product_branches (
    product_code VARCHAR(50) REFERENCES product(product_code),
    branch_id UUID REFERENCES branches(id),
    PRIMARY KEY (product_code, branch_id)
);

-- Create 'employees' table (for employment relationships)
CREATE TABLE employees (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    from_user_id UUID NOT NULL REFERENCES "user"(id),
    to_user_id UUID NOT NULL REFERENCES "user"(id),
    role VARCHAR(20) NOT NULL CHECK (role IN ('manager', 'sales')),
    status VARCHAR(20) NOT NULL CHECK (status IN ('pending', 'accepted', 'rejected', 'suspend', 'resignation')),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_by UUID REFERENCES "user"(id),
    updated_by UUID REFERENCES "user"(id)
);

-- Junction table: employee_branches (many-to-many)
CREATE TABLE employee_branches (
    employee_id UUID REFERENCES employees(id),
    branch_id UUID REFERENCES branches(id),
    PRIMARY KEY (employee_id, branch_id)
);

-- Create 'customers' table (NEW)
CREATE TABLE customers (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    phone VARCHAR(20) NOT NULL,
    branch_id UUID REFERENCES branches(id),
    rate DECIMAL(3, 2) CHECK (rate BETWEEN 0 AND 5),  -- e.g., 4.5 stars
    comment TEXT,
    created_by UUID REFERENCES "user"(id),
    updated_by UUID REFERENCES "user"(id),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Junction table: customer_products (many-to-many)
CREATE TABLE customer_products (
    customer_id UUID REFERENCES customers(id),
    product_code VARCHAR(50) REFERENCES product(product_code),
    PRIMARY KEY (customer_id, product_code)
);

-- Auto-update trigger for updated_at
CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply trigger to all tables
DO $$
DECLARE
    t text;
BEGIN
    FOR t IN 
        SELECT table_name FROM information_schema.tables 
        WHERE table_schema = 'public' AND table_type = 'BASE TABLE'
    LOOP
        EXECUTE format('CREATE TRIGGER update_%s_updated_at
            BEFORE UPDATE ON %I
            FOR EACH ROW EXECUTE FUNCTION update_updated_at()', 
            t, t);
    END LOOP;
END;
$$ LANGUAGE plpgsql;














