// filepath: d:\personal\work\storeeeeeeeeeeee\store\src\services\customer_product.service.ts
import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { CustomerProduct } from '../model/customer_products.model';
import {
  CreateCustomerProductDto,
  UpdateCustomerProductDto,
} from '../dto/customer_product.dto';

@Injectable()
export class CustomerProductService {
  constructor(
    @InjectRepository(CustomerProduct)
    private customerProductRepository: Repository<CustomerProduct>
  ) {}
  
  async create(createDto: CreateCustomerProductDto): Promise<CustomerProduct> {
    // employee field is now required
    const entity = this.customerProductRepository.create({
      phone: createDto.phone,
      product_code: createDto.product_code,
      employee: createDto.employee,
      branch_id: createDto.branch_id,
    });
    return this.customerProductRepository.save(entity);
  }

  async findAll(
    search?: string,
    searchType?: 'product' | 'phone' | 'employee'
  ): Promise<CustomerProduct[]> {
    const queryBuilder = this.customerProductRepository
      .createQueryBuilder('customerProduct')
      .leftJoinAndSelect('customerProduct.employeeUser', 'employee')
      .leftJoinAndSelect('customerProduct.branch', 'branch');

    if (search && searchType) {
      switch (searchType) {
        case 'product':
          // Search in product_code array using PostgreSQL array operators
          queryBuilder.where(`customerProduct.product_code::text LIKE :searchPattern`, {
            searchPattern: `%${search}%`,
          });
          break;
        case 'phone':
          queryBuilder.where('customerProduct.phone LIKE :search', {
            search: `%${search}%`,
          });
          break;
        case 'employee':
          queryBuilder.where('employee.name LIKE :search', {
            search: `%${search}%`,
          });
          break;
      }
    }

    return queryBuilder.getMany();
  }

  async findOne(id: string): Promise<CustomerProduct> {
    const entity = await this.customerProductRepository.findOne({
      where: { id },
      relations: ['employeeUser', 'branch'],
    });
    if (!entity) throw new NotFoundException('CustomerProduct not found');
    return entity;
  }

  async findByPhone(phone: string): Promise<CustomerProduct> {
    const entity = await this.customerProductRepository.findOne({
      where: { phone },
      relations: ['employeeUser', 'branch'],
    });
    if (!entity) throw new NotFoundException('CustomerProduct not found');
    return entity;
  }

  async update(
    id: string,
    updateDto: UpdateCustomerProductDto
  ): Promise<CustomerProduct> {
    // employee field is now optional
    const entity = await this.findOne(id);
    Object.assign(entity, updateDto);
    return this.customerProductRepository.save(entity);
  }

  async remove(id: string): Promise<void> {
    const entity = await this.findOne(id);
    await this.customerProductRepository.remove(entity);
  }
}
